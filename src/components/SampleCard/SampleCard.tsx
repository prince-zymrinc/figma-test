/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { FormControl, RadioGroup, Tooltip } from '@mui/material';
import { styled } from '@mui/material/styles';
import Image1Image from 'src/assets/images/SampleCard_Image.png';
import { SampleCardProps } from 'src/types';
import { animated, useSpring, easings } from 'react-spring';
import useSampleCard from 'src/components/SampleCard/useSampleCard';

const TypeQuest: any = animated(
  styled('div')(({ theme }: any) => ({
    backgroundColor: theme.palette['Background']['Default'],
    boxShadow: `0px 4px 8px rgba(0, 0, 0, 0.16)`,
    borderRadius: `8px`,
    display: `grid`,
    position: `relative`,
    isolation: `isolate`,
    width: `100%`,
    padding: `0px`,
    boxSizing: `border-box`,
    overflow: `hidden`,
    height: `auto`,
    gridTemplateColumns: `repeat(auto-fit, minmax(320px, 1fr))`,
    columnGap: `10px`,
    rowGap: `10px`,
  }))
);

const ImageFrame: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Image1: any = animated(
  styled('div')({
    backgroundImage: `url(${Image1Image})`,
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    borderRadius: `6px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: `stretch`,
    height: `251px`,
    margin: `0px`,
  })
);

function SampleCard(props: SampleCardProps): JSX.Element {
  const { fns } = useSampleCard(props);

  const [TypeQuestSpring, TypeQuestApi] = useSpring(() => ({
    config: {
      duration: 100,
      easing: easings['easeOutBack'],
    },
    delay: 0,
    from: { transform: 'scale(1)' },
  }));

  const [Image1Spring, Image1Api] = useSpring(() => ({
    config: {
      duration: 750,
      easing: easings['easeInOutExpo'],
    },
    delay: 0,
    from: { transform: 'translateX(0px)', opacity: 1 },
  }));
  return (
    <TypeQuest
      onMouseLeave={() => {
        TypeQuestApi.start({ transform: 'scale(1)' });
      }}
      onMouseEnter={() => {
        TypeQuestApi.start({ ...{ transform: 'scale(1.05)' }, delay: 0 });
      }}
      className={props.className}
      style={{ ...TypeQuestSpring }}
      aria-label={'temp'}
    >
      <FormControl>
        <RadioGroup row>
          {undefined &&
            undefined.map((undefined: any, index: number) => {
              return (
                <ImageFrame key={index}>
                  <Tooltip
                    arrow={true}
                    placement={'top'}
                    title={'This is an flower'}
                  >
                    <Image1
                      onClick={() => {
                        Image1Api.start({
                          ...{ transform: 'translateX(-100px)', opacity: 0 },
                          delay: 0,
                        });
                      }}
                      style={{ ...Image1Spring }}
                    ></Image1>
                  </Tooltip>
                </ImageFrame>
              );
            })}
        </RadioGroup>
      </FormControl>
    </TypeQuest>
  );
}

export default SampleCard;
